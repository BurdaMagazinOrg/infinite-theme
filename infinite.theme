<?php

use Drupal\Core\Url;
use Drupal\Core\Template\Attribute;
use Drupal\block\Entity\Block;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\image\Entity\ImageStyle;

function infinite_theme_suggestions_paragraph_alter(array &$suggestions, array $variables, $hook) {
  // TODO: find a better way to extract media bundle from paragraph item.
  if (!empty($variables['elements']['field_media']['0']['#media'])) {
    $paragraph = $variables['elements']['#paragraph'];
    /* @var Drupal\media_entity\Entity\Media $media */
    $media = $variables['elements']['field_media']['0']['#media'];
    $suggestions[] = $hook . '__' . $paragraph->bundle() . '__' . $media->getEntityTypeId() . '_' . $media->bundle();
    $suggestions[] = $hook . '__' . $paragraph->bundle() . '__' . $media->getEntityTypeId() . '_' . $media->bundle() . '__default';  // TODO: Fix static view mode.
  }
}

/**
 * Implements hook_theme_suggestions_product_alter().
 */
function infinite_theme_suggestions_product_alter(array &$suggestions, array $variables, $hook) {
  if (!empty($variables['elements']['#view_mode'])) {
    $suggestions[] = $hook . '__' . $variables['elements']['#view_mode'];
  }
}

function infinite_theme_suggestions_user_alter(array &$suggestions, array $variables, $hook) {
  if (!empty($variables['elements']['#view_mode'])) {
    $suggestions[] = $hook . '__' . $variables['elements']['#view_mode'];
  }
}

function infinite_preprocess_page(&$variables) {
  $variables['theme_infinite_path'] = '/' . drupal_get_path('theme', 'infinite');
}

function infinite_preprocess_block(&$variables) {
  $variables['front_page'] = \Drupal::url('<front>');
  $variables['logo'] = theme_get_setting('logo.url');
}

function infinite_preprocess_block__outbrain(&$variables) {
  /* @var Drupal\block\Entity\Block $block */
  $block = Block::load('advertisingslot_fba_article');
  if (is_object($block)) {
    $advertisingslot_fba_article =  \Drupal::entityManager()
      ->getViewBuilder('block')
      ->view($block, 'default');

    $variables['elements']['content']['advertisingslot_fba_article'] = $advertisingslot_fba_article;
    $variables['content']['advertisingslot_fba_article'] = $advertisingslot_fba_article;
  }
}

function infinite_preprocess_region(&$variables) {
  $variables ['front_page'] = \Drupal::url('<front>');
  $variables ['logo'] = theme_get_setting('logo.url');
}

function infinite_preprocess_html(&$variables) {
  if (\Drupal::moduleHandler()->moduleExists('metatag')) {
    /**
     * TODO: Does metatag module provide some simpler api call to get metatags?
     */
    $metatag_manager = \Drupal::service('metatag.manager');
    // First, get defaults.
    $metatags = metatag_get_default_tags();
    if (!$metatags) {
      return;
    }

    $entity = metatag_get_route_entity();
    if (!empty($entity) && $entity instanceof ContentEntityInterface) {
      $metatags = array_merge($metatags, $metatag_manager->tagsFromEntity($entity));
    }

    if (isset($metatags['fb_app_id'])) {
      $variables['fb_vars'] = ['fb_app_id' => $metatags['fb_app_id']];
    }
    $variables['gtm_vars'] = ['gtm_id' => theme_get_setting('gtm_id')];
  }
}

function infinite_preprocess_node(&$variables) {
  /* @var Node $node */
  $node = &$variables['elements']['#node'];

  // share buttons received from theme settings
  $variables['facebook_share_button'] = theme_get_setting('facebook_share_button');
  $variables['whatsapp_share_button'] = theme_get_setting('whatsapp_share_button');
  $variables['pinterest_share_button'] = theme_get_setting('pinterest_share_button');
  $variables['twitter_share_button'] = theme_get_setting('twitter_share_button');
  $variables['twitter_share_via'] = theme_get_setting('twitter_share_via');
  $variables['email_share_button'] = theme_get_setting('email_share_button');
  $variables['whatsapp_share_text'] = theme_get_setting('whatsapp_share_text');
  $variables['email_share_text'] = theme_get_setting('email_share_text');
  $variables['email_subject'] = theme_get_setting('email_subject');

  $bundle = $node->bundle();
  if ($bundle == "article" || $bundle == "page") {
    // todo: switch later to publish date.
    $variables['datetime'] = \Drupal::service('date.formatter')
      ->format($node->created->value, 'html_datetime');
    $variables['timestamp'] = \Drupal::service('date.formatter')
      ->format($node->created->value, 'infinite_timestamp');

    // Get absolute URL from node alias URL.
    $absolute_url = \Drupal::service('path.alias_manager')
      ->getAliasByPath('/node/' . $node->id());
    $absolute_url = Url::fromUri('base:/' . $absolute_url, array('absolute' => TRUE));

    // Override TWIG url with absolute alias URL.
    $variables['path'] = $variables['url'];  // used for lazy loading history API.
    $variables['url'] = $absolute_url->toString();
    $variables['nid'] = $node->id();

    // Get share image URL from teaser media.
    if ($node->hasField('field_teaser_media') &&
      !$node->field_teaser_media->isEmpty()
    ) {

      if (!empty($node->field_teaser_media->entity) &&  // todo: check wyh some media entity reference seems to be empty here after isEmpty() check? example: node 6001
        $node->field_teaser_media->entity->hasField('field_image') &&
        !$node->field_teaser_media->entity->field_image->isEmpty()
      ) {

        $share_img_path = $node->field_teaser_media->entity->field_image->entity->getFileUri();
        $share_img = ImageStyle::load('inline_l');
        if (is_object($share_img)) {
          $url = $share_img->buildUrl($share_img_path);
          $variables['share_img_url'] = $url;
        }
      }
    }
    // Add 'show_contextual_links' variable.
    /* @var User $user */
    $user = Drupal::currentUser();
    if ($user->hasPermission('access contextual links')) {
      $variables['show_contextual_links'] = TRUE;
    }
  }

  if ($bundle == "article") {
    $field_seo_title = !empty($node->field_seo_title->getValue()[0]) ? $node->field_seo_title->getValue()[0]['value'] : '';
    // Replace double quotes.
    // @toDo check, where we have this case!
    $variables['node_seo_title'] = str_replace('"', '', $field_seo_title);
    // Clean up classes array - all classes will be added in
    $variables['attributes']['class'] = array();

    // Instantiate 'wrapper_attributes' attribute object to avoid collisions
    // with actual node attributes.
    if ($variables['view_mode'] === 'full' || $variables['view_mode'] === 'lazyloading') {
      $variables['wrapper_attributes'] = new Attribute();
    }
  }
}

/**
 * Implements hook_preprocess_views().
 */
function infinite_preprocess_views_view(&$variables) {

  // todo: replace with configurable sidebar views UI plugin.
  /* @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // Render title for all other views, because we aren't using pagetitle block. // todo: check how to add pagetitle block as default?
  $variables['title']['#markup'] = $view->getTitle();
}

/**
 * Implements hook_preprocess_product().
 */
function infinite_preprocess_product(&$variables) {
  $product = $variables['elements']['#product'];
  $data_attributes = new Drupal\Core\Template\Attribute;
  $data_attributes->setAttribute('data-title', $product->title->value)
    ->setAttribute('data-shop', $product->shop->value)
    ->setAttribute('data-brand', $product->brand->value)
    ->setAttribute('data-price', $product->price->value)
    ->setAttribute('data-currency', $product->currency->value)
    ->setAttribute('data-sku', $product->sku->value)
    ->setAttribute('data-provider', 'tracdelight');

  $subID = 0;
  if (Drupal::request()->attributes->has('node')) {
    $node = Drupal::request()->attributes->get('node');
    $sub_id = 'node-' . $node->id();
  }
  elseif (Drupal::request()->attributes->has('taxonomy_term')) {
    $term = Drupal::request()->attributes->get('taxonomy_term');
    $sub_id = 'term-' . $term->id();
  }

  $variables['product_url'] = $product->detailpageurl->uri . '&subid=' . $subID;
  $data_attributes->setAttribute('data-external-url', $variables['product_url']);
  $variables['data_attributes'] = $data_attributes;
}

/**
 * Implements hook_preprocess_product().
 */
function infinite_preprocess_advertising_product(&$variables) {
  $product = $variables['elements']['#advertising_product'];
  // Set the data attributes for tracking purposes
  $data_attributes = new Drupal\Core\Template\Attribute;
  $data_attributes->setAttribute('data-title', $product->product_name->value)
    ->setAttribute('data-shop', $product->product_shop->value)
    ->setAttribute('data-brand', $product->product_brand->value)
    ->setAttribute('data-price', $product->product_price->value)
    ->setAttribute('data-currency', $product->product_currency->value)
    ->setAttribute('data-product-id', $product->product_id->value);

  $subID = 0;
  if (Drupal::request()->attributes->has('node')) {
    $node = Drupal::request()->attributes->get('node');
    $sub_id = 'node-' . $node->id();
  }
  elseif (Drupal::request()->attributes->has('taxonomy_term')) {
    $term = Drupal::request()->attributes->get('taxonomy_term');
    $sub_id = 'term-' . $term->id();
  }

  $variables['tracking_url'] = $product->product_url->uri . '&subid=' . $subID;
  $data_attributes->setAttribute('data-external-url', $variables['tracking_url']);

  $provider = explode("_", $product->product_provider->value);
  $data_attributes->setAttribute('data-provider', $provider[0]);

  $variables['data_attributes'] = $data_attributes;
}

/**
 * Implements template_preprocess_paragraph().
 */
function infinite_preprocess_paragraph(&$variables) {
  if (!empty($variables['elements']['field_media']['0']['#media'])) {
    $media = $variables['elements']['field_media']['0']['#media'];
    $variables['media_bundle'] = $media->bundle();
  }
}

function infinite_page_attachments_alter(array &$attachments) {
//  foreach($attachments['#attached']['html_head'] as $key => $attachment) {
//    if(isset($attachment[1]) && $attachment[1] == 'breakpoint_settings_loader') {
//      unset($attachments['#attached']['html_head'][$key]);
//    }
//  }
}
