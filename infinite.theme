<?php

use Drupal\Core\Template\Attribute;
use Drupal\block\Entity\Block;
use Drupal\infinite_media\MediaHelper;
use Psy\Util\Json;

function infinite_preprocess(&$variables) {
  $variables['environment'] = ['systemType' =>  isset($_ENV['AH_SITE_ENVIRONMENT']) ? $_ENV['AH_SITE_ENVIRONMENT'] : 'local'];
}

function infinite_theme_suggestions_paragraph_alter(array &$suggestions, array $variables, $hook) {
  /* @var $paragraph \Drupal\paragraphs\Entity\Paragraph */
  $paragraph = $variables['elements']['#paragraph'];

  // TODO: find a better way to extract media bundle from paragraph item.
  if (!empty($variables['elements']['field_media']['0']['#media'])) {

    /* @var $media \Drupal\media_entity\Entity\Media */
    $media = $variables['elements']['field_media']['0']['#media'];
    $suggestions[] = $hook . '__' . $paragraph->bundle() . '__' . $media->getEntityTypeId() . '_' . $media->bundle();
    $suggestions[] = $hook . '__' . $paragraph->bundle() . '__' . $media->getEntityTypeId() . '_' . $media->bundle() . '__default';  // TODO: Fix static view mode.
  }

  /* @var $parent \Drupal\Core\Entity\EntityInterface */
  $parent = $paragraph->getParentEntity();
  if ($parent) {
    $suggestions[] = $hook . '__' . $paragraph->bundle() . '__' . $parent->getEntityTypeId();
    $suggestions[] = $hook . '__' . $paragraph->bundle() . '__' . $parent->getEntityTypeId() . '__default';
    $suggestions[] = $hook . '__' . $paragraph->bundle() . '__' . $parent->getEntityTypeId() . '__' . $parent->bundle();
    $suggestions[] = $hook . '__' . $paragraph->bundle() . '__' . $parent->getEntityTypeId() . '__' . $parent->bundle() . '__default';
  }
}

/**
 * Implements hook_theme_suggestions_product_alter().
 */
function infinite_theme_suggestions_product_alter(array &$suggestions, array $variables, $hook) {
  if (!empty($variables['elements']['#view_mode'])) {
    $suggestions[] = $hook . '__' . $variables['elements']['#view_mode'];
  }
}

function infinite_theme_suggestions_user_alter(array &$suggestions, array $variables, $hook) {
  if (!empty($variables['elements']['#view_mode'])) {
    $suggestions[] = $hook . '__' . $variables['elements']['#view_mode'];
  }
}

function infinite_preprocess_page(&$variables) {
  $variables['theme_infinite_path'] = '/' . drupal_get_path('theme', 'infinite');
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}

function infinite_preprocess_block(&$variables) {
  $variables['front_page'] = \Drupal::url('<front>');
  $variables['logo'] = theme_get_setting('logo.url');
}

function infinite_preprocess_block__outbrain(&$variables) {
  /* @var Drupal\block\Entity\Block $block */
  $block = Block::load('advertisingslot_fba_article');
  if (is_object($block)) {
    $advertisingslot_fba_article =  \Drupal::entityManager()
      ->getViewBuilder('block')
      ->view($block, 'default');

    $variables['elements']['content']['advertisingslot_fba_article'] = $advertisingslot_fba_article;
    $variables['content']['advertisingslot_fba_article'] = $advertisingslot_fba_article;
  }
}

function infinite_preprocess_region(&$variables) {
  $variables ['front_page'] = \Drupal::url('<front>');
  $variables ['logo'] = theme_get_setting('logo.url');
}

function infinite_preprocess_html(&$variables) {
  if (\Drupal::moduleHandler()->moduleExists('metatag')) {
    /**
     * TODO: Does metatag module provide some simpler api call to get metatags?
     */
    $metatag_manager = \Drupal::service('metatag.manager');
    // First, get defaults.
    $metatags = metatag_get_default_tags();
    if (!$metatags) {
      return;
    }

    $entity = metatag_get_route_entity();
    if (!empty($entity) && $entity instanceof ContentEntityInterface) {
      $metatags = array_merge($metatags, $metatag_manager->tagsFromEntity($entity));
    }

    if (isset($metatags['fb_app_id'])) {
      $variables['fb_vars'] = ['fb_app_id' => $metatags['fb_app_id']];
    }
    $variables['gtm_vars'] = ['gtm_id' => theme_get_setting('gtm_id')];
  }
}

function infinite_preprocess_node(&$variables) {
  /* @var Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  $variables['nid'] = $node->id();

  // Override TWIG url with absolute alias URL.
  // Variable 'path' is used for lazy loading history API.
  $variables['path'] = $variables['url'];
  $variables['url'] = $node->url('canonical', ['absolute' => TRUE]);

  // share buttons received from theme settings
  $variables['facebook_share_button'] = theme_get_setting('facebook_share_button');
  $variables['whatsapp_share_button'] = theme_get_setting('whatsapp_share_button');
  $variables['pinterest_share_button'] = theme_get_setting('pinterest_share_button');
  $variables['twitter_share_button'] = theme_get_setting('twitter_share_button');
  $variables['twitter_share_via'] = theme_get_setting('twitter_share_via');
  $variables['email_share_button'] = theme_get_setting('email_share_button');
  $variables['whatsapp_share_text'] = theme_get_setting('whatsapp_share_text');
  $variables['email_share_text'] = theme_get_setting('email_share_text');
  $variables['email_subject'] = theme_get_setting('email_subject');

  $bundle = $node->bundle();
  if ($bundle == 'article' || $bundle == 'page') {
    // todo: switch later to publish date.
    $variables['datetime'] = \Drupal::service('date.formatter')
      ->format($node->created->value, 'html_datetime');
    $variables['timestamp'] = $node->created->value;

    $variables['share_img_url'] = MediaHelper::getImageUrlFromMediaReference(
      $node,
      'field_teaser_media',
      theme_get_setting('share_image_style')
    );

    // Add 'show_contextual_links' variable.
    /* @var User $user */
    $user = Drupal::currentUser();
    if ($user->hasPermission('access contextual links')) {
      $variables['show_contextual_links'] = TRUE;
    }
  }

  if ($bundle == 'article') {
    $field_seo_title = !empty($node->field_seo_title->getValue()[0]) ? $node->field_seo_title->getValue()[0]['value'] : '';
    // Replace double quotes.
    // @toDo check, where we have this case!
    $variables['node_seo_title'] = str_replace('"', '', $field_seo_title);
    // Clean up classes array - all classes will be added in
    $variables['attributes']['class'] = array();

    // Instantiate 'wrapper_attributes' attribute object to avoid collisions
    // with actual node attributes.
    if ($variables['view_mode'] === 'full' || $variables['view_mode'] === 'lazyloading') {
      $variables['wrapper_attributes'] = new Attribute();
    }
    $variables = _infinite_get_icon($node, $variables);
  }

  if($bundle == 'ecommerce_slider') {
    $data_slider = [];
    $start_position = $node->get('field_slider_start_position')->value;
    if(is_numeric($start_position)) {
      $data_slider['initialSlide'] = $node->get('field_slider_start_position')->value - 1;
    }
    else {
      $data_slider['initialSlide'] = 0;
    }
    $variables['data_slider'] = Json::encode($data_slider, JSON_NUMERIC_CHECK);
  }
}

/**
 * Implements hook_preprocess_views().
 */
function infinite_preprocess_views_view(&$variables) {

  // todo: replace with configurable sidebar views UI plugin.
  /* @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // Render title for all other views, because we aren't using pagetitle block.
  // todo: check how to add pagetitle block as default?
  if(isset($variables['title']) && is_array($variables['title'])){
    $variables['title']['#markup'] = $view->getTitle();
  }
  else {
    $variables['title'] = $view->getTitle();
  }
}

/**
 * Implements hook_preprocess_product().
 */
function infinite_preprocess_advertising_product(&$variables) {
  /** @var \Drupal\advertising_products\Entity\AdvertisingProduct $product */
  $product = $variables['elements']['#advertising_product'];
  // Set the data attributes for tracking purposes
  $data_attributes = new Drupal\Core\Template\Attribute;
  $data_attributes->setAttribute('data-title', $product->product_name->value)
    ->setAttribute('data-shop', $product->product_shop->value)
    ->setAttribute('data-brand', $product->product_brand->value)
    ->setAttribute('data-price', $product->product_price->value)
    ->setAttribute('data-currency', $product->product_currency->value)
    ->setAttribute('data-uuid', $product->uuid->value)
    ->setAttribute('data-product-id', $product->product_id->value)
    ->setAttribute('data-sold-out', $product->product_sold_out->value);

  // tracking_url
  $tracking_url = $product->product_url->uri;
  // This is needed only for tracdelight products
  if ($product->getType() == 'advertising_product_tracdelight') {
    $sub_id = 0;

    if (Drupal::request()->attributes->has('node')) {
      $node = Drupal::request()->attributes->get('node');
      $sub_id = 'node-' . $node->id();
    } elseif (Drupal::request()->attributes->has('taxonomy_term')) {
      $term = Drupal::request()->attributes->get('taxonomy_term');
      $sub_id = 'term-' . $term->id();
    }
    $tracking_url .= '&subid=' . $sub_id . '-' . $product->product_id->value;
  }

  $data_attributes->setAttribute('data-external-url', $tracking_url);
  $variables['tracking_url'] = $tracking_url;

  // original_price
  $original_price = $product->product_original_price->value;

  // price
  $price = $product->product_price->value;

  // provider
  $provider = explode("_", $product->product_provider->value)[0];
  $data_attributes->setAttribute('data-provider', $provider);
  $variables['provider'] = $provider;

  if ('tipser' === $provider) {
    $data_attributes->setAttribute('data-tipser-url', $variables['tracking_url']);
    $data_attributes->removeAttribute('data-external-url');
  }

  // sold_out
  $sold_out = $product->product_sold_out->value;

  if ($price <= 0 || $sold_out) {
    $variables['sold_out'] = TRUE;
  }

  if(!isset($variables['sold_out']) || !$variables['sold_out']) {
    if($price < $original_price){
      $variables['show_strikethrough_price'] = TRUE;
      $variables['percentage_saving'] = floor(($price - $original_price) / $original_price * 100);
    }
      if ('tipser' === $provider) {
      // hack so we can track product category even though it uses another field
      // for the category than e.g. Amazon products
      $tipserFieldCategory = $product->get('field_category');
      if ($tipserFieldCategory->count()) {
        /** @var \Drupal\taxonomy\Entity\Term $term */
        $term = \Drupal\taxonomy\Entity\Term::load($tipserFieldCategory->first()->getValue()['target_id']);
        if ($term) {
          $variables['tipser_product_category'] = $term->getName();
        }
      }
      $data_attributes->setAttribute('data-shop', $product->product_shop->value);
    }
  }

  $variables['data_attributes'] = $data_attributes;
}

/**
 * Implements template_preprocess_paragraph().
 */
function infinite_preprocess_paragraph(&$variables) {
  if (!empty($variables['elements']['field_media']['0']['#media'])) {
    $media = $variables['elements']['field_media']['0']['#media'];
    $variables['media_bundle'] = $media->bundle();
  }

  if ('spotlight' === $variables['paragraph']->bundle()) {
    $entity = \Drupal::routeMatch()->getParameter('taxonomy_term');
    if ($entity instanceof \Drupal\taxonomy\Entity\Term) {
      $variables = infinite_inject_pinterest_image($variables, $entity);
    }
  }
}

function infinite_preprocess_field(&$variables) {
  // INREL-2807 Set all links in promotion to nofollow
  if($variables['element']['#field_name'] === 'field_url' && $variables['element']['#bundle'] === 'promotion') {
    /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $item */
    foreach ($variables['items'] as &$item) {
      $item['content']['#options']['attributes']['rel'] = 'nofollow';
    }
  }

  if ($variables['element']['#field_name'] == 'field_tags') {
    $items = &$variables['items'];
    foreach ($items as $delta => &$item) {
      $term = $item['content']['#options']['entity'];
      $item['status'] = $term->get('status')->value;
    }
  }
}

function infinite_page_attachments_alter(array &$attachments) {
//  foreach($attachments['#attached']['html_head'] as $key => $attachment) {
//    if(isset($attachment[1]) && $attachment[1] == 'breakpoint_settings_loader') {
//      unset($attachments['#attached']['html_head'][$key]);
//    }
//  }
}

function infinite_preprocess_container(&$variables) {
  if (isset($variables['element']['#parent'])) {
    if (isset($variables['element']['#parent']['#node'])) {
      $entity = $variables['element']['#parent']['#node'];
    }
    elseif (isset($variables['element']['#parent']['#taxonomy_term'])) {
      $entity = $variables['element']['#parent']['#taxonomy_term'];
    }
    elseif (isset($variables['element']['#parent']['#user'])) {
      $entity = $variables['element']['#parent']['#user'];
    }
  }
  if (isset($entity)) {
    $variables = infinite_inject_pinterest_image($variables, $entity);

    // use seo description for pinterest share description
    if (method_exists($entity, 'bundle') && method_exists($entity, 'get') && method_exists($entity, 'hasField')) {
      switch ($entity->bundle()) {
        // field_teaser_text is misused as seo description on these content types
        // this should be fixed in https://jira.burda.com/browse/INREL-4095
        case 'article':
        case 'magazine_products':
          if ($entity->hasField('field_teaser_text')) {
            $variables['pinterest_share_description'] = $entity->get('field_teaser_text')->value;
          }
          break;
        default:
          if ($entity->hasField('field_seo_description')) {
            $variables['pinterest_share_description'] = $entity->get('field_seo_description')->value;
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_responsive_image().
 */
function infinite_preprocess_responsive_image(&$variables) {
  $variables['noscript_img_element'] = FALSE;
  if (isset($variables['img_element']) && isset($variables['sources'][0]['data-srcset'])) {
    // make a copy
    $variables['noscript_img_element'] = $variables['img_element'];
    // throw away stuff we don't need.
    unset(
      $variables['noscript_img_element']['#attached'],
      $variables['noscript_img_element']['drupalSettings'],
      $variables['noscript_img_element']['#attributes']['class'],
      $variables['noscript_img_element']['#attributes']['data-src']
    );
    // set the uri to the first element of sources, it is the largest image.
    $variables['noscript_img_element']['#uri'] = $variables['sources'][0]['data-srcset']->value();
  }
}

/**
 * Use dedicated pinterest image for sharing.
 *
 * @param $variables
 * @param $entity
 * @return mixed
 */
function infinite_inject_pinterest_image($variables, $entity)
{
  $variables['pinterest_share_img_url'] = MediaHelper::getImageUrlFromMediaReference(
    $entity,
    'field_pinterest_image'
  );
  // as fallback, if no dedicated pinterest image is set
  // use a 2:3 format of share image
  if (empty($variables['pinterest_share_img_url'])) {
    $variables['pinterest_share_img_url'] = MediaHelper::getImageUrlFromMediaReference(
      $entity,
      'field_teaser_media',
      'pinterest_fallback_teaser_image'
    );
  }

  return $variables;
}

/**
 * Check which icon to display.
 *
 * @param $node
 * @param $variables
 * @return mixed
 */
function _infinite_get_icon($node, $variables) {
  $variables['teaser_icon'] = FALSE;
  if (!empty($paragraphs = $node->field_paragraphs->referencedEntities())) {
    foreach ($paragraphs as $paragraph) {
      switch ($paragraph->bundle()) {
        case 'productdb_product':
        case 'advertising_products_paragraph':
        case 'advertising_products_embed':
        case 'ecommerce_slider_paragraph':
        case 'ecommerce_look':
          // shopping overrides everything else
          $variables['teaser_icon'] = 'shop-it';
          break 2;
        case 'gallery':
          $variables['teaser_icon']['image'] = 'image';
          break;
        case 'media':
          if (!empty($medias = $paragraph->field_media->referencedEntities())) {
            foreach ($medias as $media) {
              switch ($media->bundle()) {
                case 'video':
                case 'nexx_video':
                  $variables['teaser_icon']['video'] = 'video';
                  break;
              }
            }
          }
          break;
        case 'video':
          $variables['teaser_icon']['video'] = 'video';
          break;
      }
    }
    if (is_array($variables['teaser_icon'])) {
      if (isset($variables['teaser_icon']['video'])) {
        $variables['teaser_icon'] = 'video';
      }
      else if (isset($variables['teaser_icon']['image'])) {
          $variables['teaser_icon'] = 'image';
      }
    }
  }

  return $variables;
}

/**
 * Set infinite preprocess variables for User
 *
 * @param $variables
 *
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function infinite_preprocess_user(&$variables)  {
  try {
    $variables['has_spotlight_content'] = getUserParagraphBundle($variables['elements']['#user']) === 'spotlight' ? true : false;
  }catch (InvalidArgumentException $ex) {
    $variables['has_spotlight_content'] = false;
  }
}

/**
 * Get the paragraph bundle
 *
 * @param \Drupal\user\Entity\User $user
 * @param int|0 $paragraphPosition
 *
 * @return string
 *
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function getUserParagraphBundle(\Drupal\user\Entity\User $user, int $paragraphPosition = 0): string {
  /** @var \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $fieldParagraphs */
  $fieldParagraphs = $user->getFields(true)['field_paragraphs'];
  /** @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $currentParagraph */
  $currentParagraph = $fieldParagraphs->get($paragraphPosition);
  if(null === $currentParagraph)  {
    throw new InvalidArgumentException(
      sprintf('Paragraph at position %d is not present', $paragraphPosition)
    );
  }
  return $currentParagraph->get('entity')->getTarget()->getValue()->bundle();
}
